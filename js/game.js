//#########################################################\\
//--------------KÃ©szÃ­tette: GyÃ¶nge MÃ¡tÃ© LÃ¡szlÃ³--------------\\
//---------------------Neptun kÃ³d:LFVY9F---------------------\\
//############################################################\\

//tesztet segÃ­tÅ‘ eszkÃ¶zÃ¶k kommentelve
let testMode = false;  

let game = document.getElementById("game");

const mapSizeInput = document.getElementById("mapSize"), startButton = document.getElementById("startButton"), difficulty = document.getElementById("difficulty"), infoBox = document.getElementById("infoBox"), message = document.getElementById("message");

let mapSize = 0, bomb = 0, time = 0, mineTally = 0;

let difficultySelected = false , mapSizeSelected = false, timer = false, pauseTime, gameOver= false;

let $timer = $('#timer'), $bombCounter = $('#bombCounter');

//--------------User-input szabÃ¡lyozÃ¡sa--------------\\

document.addEventListener("DOMContentLoaded", function () {
  startButton.addEventListener("click", checkIn);
  mapSizeInput.addEventListener("input", handleMapSizeInput);
  difficulty.addEventListener("input", handleDifficultyInput);
});

function handleMapSizeInput() {
  mapSize = parseInt(mapSizeInput.value);
  mapSizeSelected = true; // pÃ¡lyamÃ©ret ellenÅ‘rzÃ©se
  //console.log("mapSize Ã©rtÃ©ke most: " + mapSize);
}

function handleDifficultyInput() {
  difficultySelected = true; // nehÃ©zsÃ©gi szint ellenÅ‘rzÃ©se
}

function checkIn() {
  if (!mapSizeSelected) {
    mapSize = parseInt(mapSizeInput.value) || 6;
    mapSizeSelected = true; // pÃ¡lyamÃ©ret ellenÅ‘rzÃ©se
    //console.log("mapSize Ã©rtÃ©ke most: " + mapSize);
  }
  generateGrid();
}

//--------------PÃ¡lya generÃ¡lÃ¡sa--------------\\

function generateGrid() {
  
  if (!difficultySelected || !mapSizeSelected) {
    alert("KÃ©rlek vÃ¡lassz pÃ¡lya nagysÃ¡got Ã©s/vagy nehÃ©zsÃ©gi szintet!");
    return;
  }
  if(!(mapSize >= 6 && mapSize <= 21)){
    alert("KÃ©rlek vÃ¡lassz megfelelÅ‘ pÃ¡lyamÃ©retet (6-20)");
    return;
  }
  calcBomb();
  //console.log("Bomb: "+bomb) - test

  mineTally = bomb;
  const menu = document.getElementById("menu");
  menu.style.display = "none";
  document.getElementById("hidden").classList.remove("hide");
  game.classList.remove("hide");

  //PÃ¡lya generÃ¡lÃ¡sa bemenet*bemenet
  game.innerHTML="";
  for (let i=0; i<mapSize; i++) {
    let row = game.insertRow(i);
    for (let j=0; j<mapSize; j++) {
      let cell = row.insertCell(j);
      cell.onclick = function() { clickBlock(this); };
      //ZÃ¡szlÃ³zÃ¡s jobb kattintÃ¡ssal
      cell.oncontextmenu = function(e) {
        e.preventDefault()
        addFlag(this)
      }
      let mine = document.createAttribute("bomb");       
      mine.value = "false";

      cell.setAttributeNode(mine);
    }
  }
  //BombÃ¡k a pÃ¡lyÃ¡hoz adÃ¡sa
  addMines();
  bombDisplay(mineTally);
  //idÅ‘ elindÃ­tÃ¡sa
  timer = window.setInterval(startTimer, 1000);
}


//--------------idÅ‘ szabÃ¡lyozÃ¡sa--------------\\

//idÅ‘ kiÃ­rÃ¡sa a jÃ¡tÃ©kos szÃ¡mÃ¡ra
function startTimer() {
  time++;
  if (time < 10) {
    $timer.html('00'+time);
  } else if (time > 9 && time < 100) {
    $timer.html('0'+time);
  } else {
    $timer.html(time);
  }
  if(time == 999)
  {
    stopTime();
    showInfoMessage("VesztettÃ©l, kifogytÃ¡l az idÅ‘bÅ‘l!");
    gameOver = true;
  }
}

//idÅ‘ megÃ¡llÃ­tÃ¡sa
function stopTime() {
  window.clearInterval(timer);
}

//--------------BombÃ¡k szabÃ¡lyozÃ¡sa--------------\\

//BombÃ¡k szÃ¡mÃ¡nak meghatÃ¡rozÃ¡sa
function calcBomb(){
  switch (difficulty.value)
  {
    case "kÃ¶nnyÅ±":
      bomb= Math.floor((mapSize*mapSize)*0.1);
      break;
    case "kÃ¶zepes":
      bomb =Math.floor((mapSize*mapSize)*0.20);
      break;
    default:
      bomb =Math.floor((mapSize*mapSize)*0.35);
      break;
  }
  if(bomb<=1)bomb = 2;
}

//BombÃ¡k lehelyezÃ©se
function addMines() {
  //lehelyezett bombÃ¡k kÃ¶vetÃ©sÃ©hez - test
  let placedMines = []; 

  //BombÃ¡k random elhelyezÃ©se Ã©s ellenÅ‘rzÃ©s duplikÃ¡ciÃ³ ellen
  for (let i = 0; i < bomb; i++) {
    let row, col, cell;
    do {
      row = Math.floor(Math.random() * mapSize);
      col = Math.floor(Math.random() * mapSize);
      cell = game.rows[row].cells[col];
    } while (cell.getAttribute("bomb") == "true" || placedMines.includes(row + "-" + col));

    cell.setAttribute("bomb", "true");
    placedMines.push(row + "-" + col); 
    if (testMode) cell.innerHTML = "X"; 
  }
  //console.log(placedMines); - test
}

//BombÃ¡k poziciÃ³i megmutatÃ¡sa a jÃ¡tÃ©kos szÃ¡mÃ¡ra
function revealMines() {
    for (let i=0; i<mapSize; i++) {
      for(let j=0; j<mapSize; j++) {
        let cell = game.rows[i].cells[j];
        if (cell.getAttribute("bomb")=="true"){
          if(!cell.classList.contains('flag')){
            cell.innerHTML = "ðŸ’£"
          }
          cell.className="mine";
        }
      }
    }
    gameOver = true;
}

//BombÃ¡k szÃ¡mÃ¡nak kiÃ­rÃ¡sa a jÃ¡tÃ©kosnak
function bombDisplay(mineTally) {
  document.getElementById("BombCounter").textContent = mineTally < 10 ? '0' + mineTally : mineTally;
}

//--------------ZÃ¡szlÃ³k szabÃ¡lyozÃ¡sa--------------\\

//ZÃ¡szlÃ³k hozzÃ¡adÃ¡sa
function addFlag(cell) {
  if (gameOver) return;
  if (!cell.classList.contains('clicked')) {
    if (!cell.classList.contains('flag')) {
      cell.classList.add('flag');
      cell.innerHTML = 'ðŸš©';
    } else {
      cell.classList.remove('flag');
      cell.innerHTML = '';
    }
  }
}

//--------------JÃ¡tÃ©kmenet szabÃ¡lyozÃ¡sa--------------\\

//Egy "lÃ©pÃ©s"
function clickBlock(cell) {
  if(gameOver) return;
  //Ha bombÃ¡ra kattint a user
  if (cell.getAttribute("bomb")=="true") {
    revealMines();
    stopTime();
    showInfoMessage("VesztettÃ©l, vÃ©ge a jÃ¡tÃ©knak!");
    gameOver = true;
  } else {
    cell.className="clicked";

    //BombÃ¡k szÃ¡ma meghatÃ¡rozÃ¡sa kÃ¶rÃ¼lÃ¶tte
    let bombCount = 0;
    let cellRow = cell.parentNode.rowIndex, cellCol = cell.cellIndex;
    
    for (let i=Math.max(cellRow-1,0); i<=Math.min(cellRow+1,mapSize-1); i++) {
      for(let j=Math.max(cellCol-1,0); j<=Math.min(cellCol+1,mapSize-1); j++) {
        if (game.rows[i].cells[j].getAttribute("bomb")=="true") bombCount++;
      }
    }
    cell.innerHTML=bombCount;

    if (bombCount==0) { 
      //Ha nincs bomba kÃ¶rÃ¼lÃ¶tte, akkor minden tovÃ¡bbi 0-Ã¡s meghatÃ¡rozÃ¡sa
      for (let i=Math.max(cellRow-1,0); i<=Math.min(cellRow+1,mapSize-1); i++) {
        for(let j=Math.max(cellCol-1,0); j<=Math.min(cellCol+1,mapSize-1); j++) {
          //RekurziÃ³
          if (game.rows[i].cells[j].innerHTML=="") clickBlock(game.rows[i].cells[j]);
        }
      }
    }
    //vÃ©gÃ©n ellenÅ‘rizzÃ¼k hogy nyert a jÃ¡tÃ©kos
    checkWin();
  }
}

//ellenÅ‘rizzÃ¼k, hogy nyert-e, Ã©s ha igen, akkor megÃ¡llÃ­tjuk az idÅ‘t 
function checkWin() {
  let win = true;
    for (let i=0; i<mapSize; i++) {
      for(let j=0; j<mapSize; j++) {
        if ((game.rows[i].cells[j].getAttribute("bomb")=="false") && (game.rows[i].cells[j].innerHTML=="")) win=false;
      }
  }
  if (win) {
    stopTime();
    showInfoMessage("GratulÃ¡lok, te nyertÃ©l!")
    gameOver = true;
    //jÃ¡tÃ©kadatok egybefÅ±zÃ©se
    let gamedata = {
      "gametime" : time,
      "dif" : difficulty.value,
      "size" : mapSize
    }
    //adatok elkÃ¼ldÃ©se
    revealMines();
    fetch("gameover.php", {
      "method" : "POST",
      "headers" : {
        "Content-Type" : "application/json; charset=utf-8"
      },
      "body" : JSON.stringify(gamedata)
    }).then(function(response){
      return response.text();
    }).then(function(data){
      //console.log(data)
    }) //hiba kezelÃ©s - visszajÃ¶vÅ‘ Ã¼zenet
  }
}

function showInfoMessage(ms) {
  infoBox.style.display = "block";
  message.innerHTML = ms;
}

document.getElementById("newgame").addEventListener("click", function() {
  location.reload();
});

